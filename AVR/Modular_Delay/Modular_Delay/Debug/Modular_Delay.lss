
Modular_Delay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000776  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b1  00000000  00000000  00000966  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000308  00000000  00000000  00001017  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001320  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000392  00000000  00000000  00001384  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000087  00000000  00000000  00001716  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000179d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <timer0_init>:
// what all function defined in .h should be defined here
#include<avr/io.h>

void timer0_init(void)
{
	TCCR0A|=(1<<WGM01); //BRING TO CTC MODE
  80:	84 b5       	in	r24, 0x24	; 36
  82:	82 60       	ori	r24, 0x02	; 2
  84:	84 bd       	out	0x24, r24	; 36
	OCR0A=249;//SET POINT (COMPARISON VALUE) - count=250
  86:	89 ef       	ldi	r24, 0xF9	; 249
  88:	87 bd       	out	0x27, r24	; 39
	TCNT0=0;
  8a:	16 bc       	out	0x26, r1	; 38
	TCCR0B|=(1<<CS00)|(1<<CS01);// PRESCALING=64
  8c:	85 b5       	in	r24, 0x25	; 37
  8e:	83 60       	ori	r24, 0x03	; 3
  90:	85 bd       	out	0x25, r24	; 37
	TIFR0|=(1<<OCF0A); // RESET COMPARISON FLAG INITIALLY TO 0 (WIERD METHOD)
  92:	85 b3       	in	r24, 0x15	; 21
  94:	82 60       	ori	r24, 0x02	; 2
  96:	85 bb       	out	0x15, r24	; 21
  98:	08 95       	ret

0000009a <delay_created>:
	// will create 1 ms delay
	
}

void delay_created(uint16_t ms)
{
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	ec 01       	movw	r28, r24
	timer0_init(); 
  a0:	0e 94 40 00 	call	0x80	; 0x80 <timer0_init>
	while(ms--)
  a4:	06 c0       	rjmp	.+12     	; 0xb2 <delay_created+0x18>
	{
		
		while (!(TIFR0 & (1<<OCF0A)))// 1 means zero and zero means full
  a6:	a9 9b       	sbis	0x15, 1	; 21
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <delay_created+0xc>
		{
			//BLANK - just to reduce delay one by one using a loop
		}
		TIFR0|=(1<<OCF0A);	 
  aa:	85 b3       	in	r24, 0x15	; 21
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	85 bb       	out	0x15, r24	; 21
}

void delay_created(uint16_t ms)
{
	timer0_init(); 
	while(ms--)
  b0:	e9 01       	movw	r28, r18
  b2:	9e 01       	movw	r18, r28
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	31 09       	sbc	r19, r1
  b8:	cd 2b       	or	r28, r29
  ba:	a9 f7       	brne	.-22     	; 0xa6 <delay_created+0xc>
		}
		TIFR0|=(1<<OCF0A);	 
		
	}
	
  bc:	df 91       	pop	r29
  be:	cf 91       	pop	r28
  c0:	08 95       	ret

000000c2 <main>:
#include <stdint.h>


int main(void)
{
   DDRB|=(1<<DDB5);
  c2:	84 b1       	in	r24, 0x04	; 4
  c4:	80 62       	ori	r24, 0x20	; 32
  c6:	84 b9       	out	0x04, r24	; 4
   timer0_init(); 
  c8:	0e 94 40 00 	call	0x80	; 0x80 <timer0_init>
    while (1) 
    {
		PORTB^=(1<<PORTB5);
  cc:	95 b1       	in	r25, 0x05	; 5
  ce:	80 e2       	ldi	r24, 0x20	; 32
  d0:	89 27       	eor	r24, r25
  d2:	85 b9       	out	0x05, r24	; 5
		delay_created(5000);
  d4:	88 e8       	ldi	r24, 0x88	; 136
  d6:	93 e1       	ldi	r25, 0x13	; 19
  d8:	0e 94 4d 00 	call	0x9a	; 0x9a <delay_created>
  dc:	f7 cf       	rjmp	.-18     	; 0xcc <main+0xa>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
