
LED_Bright_Dim_Using_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000762  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000687  00000000  00000000  0000091a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b8  00000000  00000000  00000fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000125c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b5  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000af  00000000  00000000  00001635  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000016e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include<util/delay.h>


int main(void)
{
	DDRD|=(1<<DDD6);
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	80 64       	ori	r24, 0x40	; 64
  84:	8a b9       	out	0x0a, r24	; 10
	TCCR0A |= (1<<WGM00) | (1<<WGM01);    //Generate wave
  86:	84 b5       	in	r24, 0x24	; 36
  88:	83 60       	ori	r24, 0x03	; 3
  8a:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<COM0A1) | (1<<COM0A0); // Inverting
  8c:	84 b5       	in	r24, 0x24	; 36
  8e:	80 6c       	ori	r24, 0xC0	; 192
  90:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00) | (1<<CS01);
  92:	85 b5       	in	r24, 0x25	; 37
  94:	83 60       	ori	r24, 0x03	; 3
  96:	85 bd       	out	0x25, r24	; 37
	TCCR0B&=~(1<<CS02);                 //select prescalar=64
  98:	85 b5       	in	r24, 0x25	; 37
  9a:	8b 7f       	andi	r24, 0xFB	; 251
  9c:	85 bd       	out	0x25, r24	; 37
	
	while (1)
	{
		for (uint8_t i = 0; i < 255; i++)
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	08 c0       	rjmp	.+16     	; 0xb2 <main+0x32>
		{
			OCR0A = i;       // Increase duty cycle to Increase brightness
  a2:	87 bd       	out	0x27, r24	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	ef e3       	ldi	r30, 0x3F	; 63
  a6:	fc e9       	ldi	r31, 0x9C	; 156
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <main+0x28>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x2e>
  ae:	00 00       	nop
	TCCR0B |= (1<<CS00) | (1<<CS01);
	TCCR0B&=~(1<<CS02);                 //select prescalar=64
	
	while (1)
	{
		for (uint8_t i = 0; i < 255; i++)
  b0:	8f 5f       	subi	r24, 0xFF	; 255
  b2:	8f 3f       	cpi	r24, 0xFF	; 255
  b4:	b1 f7       	brne	.-20     	; 0xa2 <main+0x22>
  b6:	08 c0       	rjmp	.+16     	; 0xc8 <main+0x48>
			_delay_ms(10);   
		}
		
		for (uint8_t i = 255; i > 0; i--)
		{
			OCR0A = i;       // Decrease duty cycle to decrease brightness
  b8:	87 bd       	out	0x27, r24	; 39
  ba:	ef e3       	ldi	r30, 0x3F	; 63
  bc:	fc e9       	ldi	r31, 0x9C	; 156
  be:	31 97       	sbiw	r30, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <main+0x3e>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x44>
  c4:	00 00       	nop
		{
			OCR0A = i;       // Increase duty cycle to Increase brightness
			_delay_ms(10);   
		}
		
		for (uint8_t i = 255; i > 0; i--)
  c6:	81 50       	subi	r24, 0x01	; 1
  c8:	81 11       	cpse	r24, r1
  ca:	f6 cf       	rjmp	.-20     	; 0xb8 <main+0x38>
  cc:	e8 cf       	rjmp	.-48     	; 0x9e <main+0x1e>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
