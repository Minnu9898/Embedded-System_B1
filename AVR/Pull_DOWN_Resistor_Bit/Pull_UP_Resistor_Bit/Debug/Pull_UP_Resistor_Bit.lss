
Pull_UP_Resistor_Bit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000124  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a8  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066f  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b9  00000000  00000000  0000101f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000012d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ad  00000000  00000000  000012fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000120  00000000  00000000  000016a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000017c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 90 00 	jmp	0x120	; 0x120 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include<util/delay.h>


int main(void)
{
	DDRD &= ~(1<<DDD2); // BIT made as INPUT to connect LED
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	8b 7f       	andi	r24, 0xFB	; 251
  84:	8a b9       	out	0x0a, r24	; 10
	 DDRB= DDRB|(1<<DDB5); // bit made as output to connect LED
  86:	84 b1       	in	r24, 0x04	; 4
  88:	80 62       	ori	r24, 0x20	; 32
  8a:	84 b9       	out	0x04, r24	; 4
	 DDRB= DDRB|(1<<DDB4);
  8c:	84 b1       	in	r24, 0x04	; 4
  8e:	80 61       	ori	r24, 0x10	; 16
  90:	84 b9       	out	0x04, r24	; 4
	
	while (1)
	{
		if(PIND & (1<<PIND2))     //Check PIND2 is high or not  ( normal case it will be zero) 
  92:	4a 9b       	sbis	0x09, 2	; 9
  94:	3e c0       	rjmp	.+124    	; 0x112 <main+0x92>
		{
			
			PORTB|=(1<<PORTB5); // 1  0
  96:	85 b1       	in	r24, 0x05	; 5
  98:	80 62       	ori	r24, 0x20	; 32
  9a:	85 b9       	out	0x05, r24	; 5
			PORTB&=~ (1<<PORTB4);
  9c:	85 b1       	in	r24, 0x05	; 5
  9e:	8f 7e       	andi	r24, 0xEF	; 239
  a0:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	2a ea       	ldi	r18, 0xAA	; 170
  a4:	38 ef       	ldi	r19, 0xF8	; 248
  a6:	80 e1       	ldi	r24, 0x10	; 16
  a8:	92 e0       	ldi	r25, 0x02	; 2
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	30 40       	sbci	r19, 0x00	; 0
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	d9 f7       	brne	.-10     	; 0xaa <main+0x2a>
  b4:	00 00       	nop
			_delay_ms(13000);
			PORTB&=~ (1<<PORTB5);   // OFF
  b6:	85 b1       	in	r24, 0x05	; 5
  b8:	8f 7d       	andi	r24, 0xDF	; 223
  ba:	85 b9       	out	0x05, r24	; 5
			PORTB&=~ (1<<PORTB4);
  bc:	85 b1       	in	r24, 0x05	; 5
  be:	8f 7e       	andi	r24, 0xEF	; 239
  c0:	85 b9       	out	0x05, r24	; 5
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	3b e7       	ldi	r19, 0x7B	; 123
  c6:	82 e9       	ldi	r24, 0x92	; 146
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	30 40       	sbci	r19, 0x00	; 0
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x48>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x52>
  d2:	00 00       	nop
			_delay_ms(3000); 
			PORTB|=(1<<PORTB4); //0 1
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	80 61       	ori	r24, 0x10	; 16
  d8:	85 b9       	out	0x05, r24	; 5
			PORTB&=~ (1<<PORTB5);
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	8f 7d       	andi	r24, 0xDF	; 223
  de:	85 b9       	out	0x05, r24	; 5
  e0:	9f ef       	ldi	r25, 0xFF	; 255
  e2:	2b e7       	ldi	r18, 0x7B	; 123
  e4:	32 e9       	ldi	r19, 0x92	; 146
  e6:	91 50       	subi	r25, 0x01	; 1
  e8:	20 40       	sbci	r18, 0x00	; 0
  ea:	30 40       	sbci	r19, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x66>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x70>
  f0:	00 00       	nop
			_delay_ms(3000);
			PORTB&=~ (1<<PORTB5);   // OFF
  f2:	85 b1       	in	r24, 0x05	; 5
  f4:	8f 7d       	andi	r24, 0xDF	; 223
  f6:	85 b9       	out	0x05, r24	; 5
			PORTB&=~ (1<<PORTB4);
  f8:	85 b1       	in	r24, 0x05	; 5
  fa:	8f 7e       	andi	r24, 0xEF	; 239
  fc:	85 b9       	out	0x05, r24	; 5
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	9b e7       	ldi	r25, 0x7B	; 123
 102:	22 e9       	ldi	r18, 0x92	; 146
 104:	81 50       	subi	r24, 0x01	; 1
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	20 40       	sbci	r18, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x84>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x8e>
 10e:	00 00       	nop
 110:	c0 cf       	rjmp	.-128    	; 0x92 <main+0x12>
			
		}
		
		else // switch not pressed
		{
			PORTB&=~ (1<<PORTB5);   // OFF
 112:	85 b1       	in	r24, 0x05	; 5
 114:	8f 7d       	andi	r24, 0xDF	; 223
 116:	85 b9       	out	0x05, r24	; 5
			PORTB&=~ (1<<PORTB4);
 118:	85 b1       	in	r24, 0x05	; 5
 11a:	8f 7e       	andi	r24, 0xEF	; 239
 11c:	85 b9       	out	0x05, r24	; 5
 11e:	b9 cf       	rjmp	.-142    	; 0x92 <main+0x12>

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
