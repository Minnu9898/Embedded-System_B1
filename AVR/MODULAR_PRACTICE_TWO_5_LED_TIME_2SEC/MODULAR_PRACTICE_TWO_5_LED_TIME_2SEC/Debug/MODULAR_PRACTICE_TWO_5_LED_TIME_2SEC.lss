
MODULAR_PRACTICE_TWO_5_LED_TIME_2SEC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000776  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b1  00000000  00000000  0000096a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000302  00000000  00000000  0000101b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001320  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ba  00000000  00000000  00001384  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000087  00000000  00000000  0000173e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000017c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include "Two_sec_delay.h"


int main(void)
{	
	timer0_init();
  80:	0e 94 4e 00 	call	0x9c	; 0x9c <timer0_init>
	DDRB|=(1<<DDB5)|(1<<DDB4)|(1<<DDB3)|(1<<DDB2)|(1<<DDB1); // set B5,B4,B3,B2 as output
  84:	84 b1       	in	r24, 0x04	; 4
  86:	8e 63       	ori	r24, 0x3E	; 62
  88:	84 b9       	out	0x04, r24	; 4
    while (1) 
    {
		PORTB ^=(1<<PORTB5)|(1<<PORTB4)|(1<<PORTB3)|(1<<PORTB2)|(1<<PORTB1);
  8a:	95 b1       	in	r25, 0x05	; 5
  8c:	8e e3       	ldi	r24, 0x3E	; 62
  8e:	89 27       	eor	r24, r25
  90:	85 b9       	out	0x05, r24	; 5
		Two_sec_delay(2000);
  92:	80 ed       	ldi	r24, 0xD0	; 208
  94:	97 e0       	ldi	r25, 0x07	; 7
  96:	0e 94 5b 00 	call	0xb6	; 0xb6 <Two_sec_delay>
  9a:	f7 cf       	rjmp	.-18     	; 0x8a <main+0xa>

0000009c <timer0_init>:

#include <avr/io.h>

void timer0_init(void)
{
	TCCR0A|=(1<<WGM01); //BRING TO CTC MODE
  9c:	84 b5       	in	r24, 0x24	; 36
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	84 bd       	out	0x24, r24	; 36
	OCR0A=249;//SET POINT (COMPARISON VALUE) - count=250
  a2:	89 ef       	ldi	r24, 0xF9	; 249
  a4:	87 bd       	out	0x27, r24	; 39
	TCNT0=0;
  a6:	16 bc       	out	0x26, r1	; 38
	TCCR0B|=(1<<CS00)|(1<<CS01);// PRESCALING=64
  a8:	85 b5       	in	r24, 0x25	; 37
  aa:	83 60       	ori	r24, 0x03	; 3
  ac:	85 bd       	out	0x25, r24	; 37
	TIFR0|=(1<<OCF0A); // RESET COMPARISON FLAG INITIALLY TO 0 (WIERD METHOD)
  ae:	85 b3       	in	r24, 0x15	; 21
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	85 bb       	out	0x15, r24	; 21
  b4:	08 95       	ret

000000b6 <Two_sec_delay>:
	
	// will create 1 ms delay	
}
void Two_sec_delay(uint16_t ms)
{
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	ec 01       	movw	r28, r24
	timer0_init();
  bc:	0e 94 4e 00 	call	0x9c	; 0x9c <timer0_init>
	while(ms--)
  c0:	06 c0       	rjmp	.+12     	; 0xce <Two_sec_delay+0x18>
	{
		while (!(TIFR0 & (1<<OCF0A)))// 1 means zero and zero means full
  c2:	a9 9b       	sbis	0x15, 1	; 21
  c4:	fe cf       	rjmp	.-4      	; 0xc2 <Two_sec_delay+0xc>
		{
			//BLANK - just to reduce delay one by one using a loop
		}
		TIFR0|=(1<<OCF0A);
  c6:	85 b3       	in	r24, 0x15	; 21
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	85 bb       	out	0x15, r24	; 21
	// will create 1 ms delay	
}
void Two_sec_delay(uint16_t ms)
{
	timer0_init();
	while(ms--)
  cc:	e9 01       	movw	r28, r18
  ce:	9e 01       	movw	r18, r28
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	31 09       	sbc	r19, r1
  d4:	cd 2b       	or	r28, r29
  d6:	a9 f7       	brne	.-22     	; 0xc2 <Two_sec_delay+0xc>
			//BLANK - just to reduce delay one by one using a loop
		}
		TIFR0|=(1<<OCF0A);
		
	}
	TIFR0|=(1<<OCF0A);
  d8:	85 b3       	in	r24, 0x15	; 21
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	85 bb       	out	0x15, r24	; 21
}
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
